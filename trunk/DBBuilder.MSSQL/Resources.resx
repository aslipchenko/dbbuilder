<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="msgConversionLogInsertFailure" xml:space="preserve">
    <value>Failed to save conversion script execution log to sysConversionLog: {0} (most likely that the table is missing).</value>
  </data>
  <data name="msgDeletedObjects" xml:space="preserve">
    <value>Deleted all {0} from {1}</value>
  </data>
  <data name="msgDependencyFileConstraintViolation" xml:space="preserve">
    <value>Constrain violation exception raised during dependency file load. It is likely that dependency file contains duplication entries. Additional exception data follows.</value>
  </data>
  <data name="msgFailure" xml:space="preserve">
    <value>Failed - {0}, {1}</value>
  </data>
  <data name="msgFinishedConversion" xml:space="preserve">
    <value>Finished conversion of database {0}, processed {1} files.</value>
  </data>
  <data name="msgNoDependencyFileName" xml:space="preserve">
    <value>You should provide valid (non-empty) dependency file name.</value>
  </data>
  <data name="msgOK" xml:space="preserve">
    <value>OK - {0}</value>
  </data>
  <data name="msgScriptObjectFailure" xml:space="preserve">
    <value>Failed to script object  '{0}' of type {1}</value>
  </data>
  <data name="msgScriptWasExecutedBefore" xml:space="preserve">
    <value>Script file {0} was executed already on {2} GMT (sysConversionLog.ID = {1})</value>
  </data>
  <data name="msgSkipConversionScriptsAfterError" xml:space="preserve">
    <value>All subsequent conversion scripts will be skipped.</value>
  </data>
  <data name="sqlConversionLogData" xml:space="preserve">
    <value>INSERT INTO sysConversionLog (HostName, AccountName,gmtActionDate,IsSuccessful, FileName,FileBody,CheckSum)
VALUES ('{0}', '{1}','{2}',{3},'{4}','{5}','{6}');</value>
  </data>
  <data name="sqlFindConversionFileByCheckSum" xml:space="preserve">
    <value>SELECT ID, gmtActionDate FROM sysConversionLog WHERE CheckSum = '{0}' AND IsSuccessful = 1</value>
    <comment>SQL script to find if a script with given checksum was already executed for current DB</comment>
  </data>
  <data name="sqlGetMasterPath" xml:space="preserve">
    <value>select top 1 
	substring(rtrim(filename), 1, len(rtrim(filename)) - charindex('\', reverse(rtrim(filename)))+1)
from master.dbo.sysfiles order by fileid;</value>
    <comment>Get path to master database files</comment>
  </data>
  <data name="sqlGetTableData" xml:space="preserve">
    <value>SELECT * FROM {0}</value>
  </data>
  <data name="sqlInsertTemplate" xml:space="preserve">
    <value>INSERT INTO {0} ({1}) VALUES ({2});</value>
  </data>
  <data name="sqlMSDependencyTemplate" xml:space="preserve">
    <value>exec sp_MSdependencies @flags = 0x</value>
  </data>
  <data name="sqlMultiUser" xml:space="preserve">
    <value>ALTER DATABASE [{0}] SET MULTI_USER</value>
    <comment>SQL statement to put database to milty user mode</comment>
  </data>
  <data name="sqlSetIdentityInsert" xml:space="preserve">
    <value>SET IDENTITY_INSERT [{0}] {1}</value>
  </data>
  <data name="sqlSingleUser" xml:space="preserve">
    <value>ALTER DATABASE [{0}] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;</value>
    <comment>SQL statement to put database to single user mode</comment>
  </data>
  <data name="sqlUseDatabase" xml:space="preserve">
    <value>USE [{0}];</value>
  </data>
  <data name="sqlUserTablesMatchingTemplate" xml:space="preserve">
    <value>select 
	o.name as TableName, 
	c_id.name as idpresent,
	c_ident.name as identitycolumn
from sysobjects o
left join syscolumns c_id on o.id = c_id.id and c_id.name = 'id'
left join syscolumns c_ident on o.id = c_ident.id and c_ident.status &amp; 0x80 &gt; 0
where o.name like '{0}' and o.xtype='U'</value>
    <comment>SQL statement to get list of user tables matching given template</comment>
  </data>
  <data name="traceMsgCreateDBObjectsInvocation" xml:space="preserve">
    <value>SqlServerHelper.CreateDBObjects invoked, dependency file name = {0}\{1}</value>
  </data>
  <data name="traceMsgCreateNewDBInvocation" xml:space="preserve">
    <value>SqlServerHelper.CreateNewDB: server = {0}, database = {1}, inputDir = {2}, dependencyFile = {3}, lock database = {4}</value>
  </data>
  <data name="traceMsgDropDBObjectsInvocation" xml:space="preserve">
    <value>SqlServerHelper.DropDBObjects: Dropping following object types: {0}</value>
  </data>
  <data name="traceMsgObjectDropped" xml:space="preserve">
    <value>Dropped {0}</value>
  </data>
  <data name="traceMsgRestoreDBObjectsInvocation" xml:space="preserve">
    <value>SqlServerHelper.RestoreDBObjects: server = {0}, database = {1}, inputDir = {2}, dependencyFile = {3}, lock database = {4}, drop existing objects of the same type = {5}</value>
  </data>
  <data name="traceMsgRestoreObject" xml:space="preserve">
    <value>Successfully executed {0}</value>
  </data>
  <data name="traceMsgScriptDBDataInvocation" xml:space="preserve">
    <value>SqlServerHelper.ScriptDBData: server = {0}, database = {1}, outputDir = {2}, dependencyFile = {3}, table mask = {4}</value>
  </data>
  <data name="traceMsgScriptDBInvocation" xml:space="preserve">
    <value>SqlServerHelper.ScriptDB: database = {0}, object types = {3}, dependency file = {1}\{2}</value>
  </data>
  <data name="traceMsgScriptObject" xml:space="preserve">
    <value>Scripted {0} of type {1}</value>
  </data>
  <data name="traceMsgSkippingObjectTypeDueToLowServerVersion" xml:space="preserve">
    <value>Skipping {0} as current server version is lover that required ({1})</value>
  </data>
  <data name="traceMsgTableData" xml:space="preserve">
    <value>Scripted {1} rows from {0}</value>
  </data>
  <data name="traceMsgUpgradeDBInvocation" xml:space="preserve">
    <value>SqlServerHelper.UpgradeDB: server = {0}, database = {1}, inputDir = {2}, dependencyFile = {3}, conversionDir = {4}, lock database = {5}</value>
  </data>
</root>